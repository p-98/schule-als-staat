" For file uploads; automatically handled by graphql-yoga "
scalar File
" For void returns, handled by graphql-scalars "
scalar Void
" For RFC 3339 datetime strings, handled by graphql-scalars "
scalar DateTimeISO
" For JSON, handled by graphql-scalars "
scalar JSON

#            #
# Enum types #
#            #

" Roles used for authorization "
enum UserRole {
    ADMIN
    USER
    CITIZEN
    COMPANY
    GUEST
    POLICE
    BANK
    BORDER_CONTROL
    POLITICS
}

" type of user "
enum UserType {
    CITIZEN
    COMPANY
    GUEST
}

" state of employment offer "
enum EmploymentOfferState {
    PENDING
    REJECTED
}
" state of employment offer available to citizens "
enum EmploymentOfferStateCitizenInput {
    PENDING
}
" state of employment offer available to companies "
enum EmploymentOfferStateCompanyInput {
    PENDING
    REJECTED
}

" change action types "
enum ChangeTransactionAction {
    VIRTUAL_TO_REAL
    REAL_TO_VIRTUAL
}

" action of BorderCrossing "
enum BorderCrossingAction {
    ENTER
    LEAVE
}

" type of vote "
enum VoteType {
    " Every choice is rated individually between 0.0 and 1.0 "
    CONSENSUS
    " One choice is selected with 1.0, all others set to 0.0 "
    RADIO
}

#                        #
# Object and Union types #
#                        #

" Ein Buch " # eslint-disable-next-line @graphql-eslint/strict-id-in-types
type Book {
    title: String!
    author: Author!
}
" Input type of a book "
input BookInput {
    title: String!
    author: String!
}

" Ein Author " # eslint-disable-next-line @graphql-eslint/strict-id-in-types
type Author {
    name: String!
    books: [Book!]!
}

" The current session "
type Session {
    id: ID!
    user: User
}

" Base type for users "
interface User {
    type: UserType!
    id: ID!
    roles: [UserRole!]!

    balance: Float!
    " amount of virtual money that can be changed back to real money "
    redemptionBalance: Float!
    transactions: [Transaction!]!
}
" Information needed to identify a user "
input UserSignatureInput {
    type: UserType!
    id: String!
}
" Information needed to authenticate a user "
input CredentialsInput {
    type: UserType!
    id: ID!
    password: String
}
" A guest user "
type GuestUser implements User {
    type: UserType!
    id: ID!
    roles: [UserRole!]!
    balance: Float!
    " amount of virtual money that can be changed back to real money "
    redemptionBalance: Float!
    transactions: [Transaction!]!
    name: String
    enteredAt: DateTimeISO!
    leftAt: DateTimeISO
}
" Input type of a guest "
input GuestUserInput {
    balance: Float
    name: String
}
" A citizen user "
type CitizenUser implements User {
    type: UserType!
    id: ID!
    roles: [UserRole!]!
    balance: Float!
    " amount of virtual money that can be changed back to real money "
    redemptionBalance: Float!
    transactions: [Transaction!]!
    firstName: String!
    lastName: String!
    name: String!
    image: String!
    employment: Employment
    employmentOffers(
        state: EmploymentOfferStateCitizenInput! = PENDING
    ): [EmploymentOffer!]!
    isInState: Boolean!
}
" A company user "
type CompanyUser implements User {
    type: UserType!
    id: ID!
    roles: [UserRole!]!
    balance: Float!
    " amount of virtual money that can be changed back to real money "
    redemptionBalance: Float!
    transactions: [Transaction!]!
    drafts: [Draft!]!
    name: String!
    image: String!
    products: [Product!]!
    employer: Employment!
    employees: [Employment!]!
    employmentOffers(
        state: EmploymentOfferStateCompanyInput!
    ): [EmploymentOffer!]!
    stats: [CompanyStatsFragment!]!
}
" Representing a 1h timeframe of the company's stats "
type CompanyStatsFragment {
    startOfHour: DateTimeISO!
    staff: Float!
    staffCost: Float!
    grossRevenue: Float!
    netRevenue: Float!
    profit: Float!
}

" Information about a shift on an employee "
type Worktime {
    id: ID!
    employment: Employment!
    start: DateTimeISO!
    " If null, the shift has not yet ended "
    end: DateTimeISO
}

" Contains information about an employment "
type Employment {
    id: Int!
    company: CompanyUser!
    citizen: CitizenUser!

    # dynamic values
    " in seconds "
    worktimeToday: Int!
    " in seconds "
    worktimeYesterday: Int!

    # contract (static values)
    " virtual currency per hour (employment contract) "
    salary: Float!
    " worktime per day in seconds (employment contract) "
    minWorktime: Int!
}
" A employment offer "
type EmploymentOffer {
    id: Int!
    company: CompanyUser!
    citizen: CitizenUser!
    state: EmploymentOfferState!
    " virtual currency per hour "
    salary: Float!
    " worktime per day in seconds "
    minWorktime: Int!
}
" Input type for an employment offer "
input EmploymentOfferInput {
    citizenId: ID!
    " virtual currency per hour "
    salary: Float!
    " worktime per day in seconds "
    minWorktime: Int!
}

" Base type for transactions"
interface Transaction {
    id: Int!
    date: DateTimeISO!
}
" Base type for transaction drafts "
interface Draft {
    id: Int!
    date: DateTimeISO!
}
" A transfer transaction "
type TransferTransaction implements Transaction {
    id: Int!
    date: DateTimeISO!
    sender: User!
    receiver: User!
    value: Float!
    purpose: String
}
" Input for a transfer transaction "
input TransferTransactionInput {
    " receiver must be a citizen "
    receiver: UserSignatureInput!
    value: Float!
    purpose: String
}
" A change transaction "
type ChangeTransaction implements Transaction {
    id: Int!
    date: DateTimeISO!
    user: User!
    action: ChangeTransactionAction!
    valueVirtual: Float!
    valueReal: Float!
}
" The draft of a change transaction "
type ChangeDraft implements Draft {
    id: Int!
    date: DateTimeISO!
    action: ChangeTransactionAction!
    valueVirtual: Float!
    valueReal: Float!
}
" Input type of a change transaction "
input ChangeInput {
    action: ChangeTransactionAction!
    " value in the currency from which is changed "
    value: Float!
}
" A purchase transaction "
type PurchaseTransaction implements Transaction {
    id: Int!
    date: DateTimeISO!
    customer: User!
    company: CompanyUser!
    grossPrice: Float!
    netPrice: Float!
    tax: Float!
    items: [PurchaseItem!]!
    discount: Float
}
" The draft of a purchase transaction "
type PurchaseDraft implements Draft {
    id: Int!
    date: DateTimeISO!
    company: CompanyUser!
    grossPrice: Float!
    netPrice: Float!
    tax: Float!
    items: [PurchaseItem!]!
    discount: Float!
}
" Input type of a purchase transaction "
input PurchaseInput {
    items: [PurchaseItemInput!]!
    discount: Float
}

" Input type of a purchase at warehouse transaction "
input WarehousePurchaseInput {
    items: [PurchaseItemInput!]!
}
" Tuple with product and amount for use in purchases " # eslint-disable-next-line @graphql-eslint/strict-id-in-types
type PurchaseItem {
    product: Product!
    amount: Int!
}
" Tuple with product and amount for use in purchases "
input PurchaseItemInput {
    product: ProductRevisionInput!
    amount: Int!
}
" A customs transaction "
type CustomsTransaction implements Transaction {
    id: Int!
    date: DateTimeISO!
    user: User!
    customs: Float!
}
" Input type for customs transaction "
input CustomsInput {
    user: UserSignatureInput!
    customs: Float!
}
" A salary transaction "
type SalaryTransaction implements Transaction {
    id: Int!
    date: DateTimeISO!
    employment: Employment!
    grossValue: Float!
    netValue: Float!
    tax: Float!
    " If null, it is a bonus payment "
    worktime: Worktime
    isBonus: Boolean!
}

" return type for registerBorderCrossing mutation " # eslint-disable-next-line @graphql-eslint/strict-id-in-types
type BorderCrossing {
    citizen: CitizenUser!
    action: BorderCrossingAction!
    date: DateTimeISO!
}

" Information about the entering and leaving of a citizen "
type Stay {
    id: Int!
    citizen: CitizenUser!
    enteredAt: DateTimeISO!
    leftAt: DateTimeISO
}

" A product of an company "
type Product {
    id: ID!
    revision: ID!
    company: CompanyUser!
    name: String!
    price: Float!
    deleted: Boolean!
    salesToday: Int!
    salesTotal: Int!
    salesPerDay: Float!
    grossRevenueTotal: Float!
    stats: [ProductStatsFragment!]!
}
" Input type for Product "
input ProductInput {
    name: String!
    price: Float!
}
" Information needed to identify a product revision "
input ProductRevisionInput {
    id: ID!
    revision: ID!
}
" Representing a 1h timeframe of the product's stats"
type ProductStatsFragment {
    startOfHour: DateTimeISO!
    sales: Int!
    grossRevenue: Float!
}

" A vote "
type Vote {
    id: ID!
    type: VoteType!
    title: String!
    description: String!
    image: String!
    endAt: DateTimeISO!
    choices: [String!]!
    " Vote of current user, if he voted "
    # eslint-disable-next-line @graphql-eslint/no-typename-prefix
    votingPaper: [Float!]
    " Result taking all votes into account, if the vote has endet "
    result: [Float!]
    chartInfo: String
}
" Input for createVote mutation "
input VoteInput {
    type: VoteType!
    title: String!
    description: String!
    image: File!
    endAt: DateTimeISO!
    choices: [String!]!
}

" Information of an id card "
type Card {
    id: ID!
    user: User
    blocked: Boolean!
}

#                #
# API Root types #
#                #

" Queries "
type Query {
    books: [Book!]!
    book(title: String!): Book

    authors: [Author!]!
    author(name: String!): Author

    " Current session information. "
    session: Session!
    " Currently logged in user. Authorized: user "
    me: User!
    " Currently logged in guest. Authorized: guest "
    meGuest: GuestUser!
    " Currently logged in citizen. Authorized: citizen "
    meCitizen: CitizenUser!
    " Currently logged in company. Authorized: company "
    meCompany: CompanyUser!

    user(user: UserSignatureInput!): User!

    " Information on all votes. Authorized: citizen, political admin "
    votes: [Vote!]!

    " Reads user assigned to card, if any. "
    readCard(id: ID!): User
    " Read card information. Authorized: border control, admin "
    card(id: ID!): Card!
}

" Mutations "
type Mutation {
    addBook(book: BookInput!): Book!

    " Login as user, successive calls are possible. Guests must no specify a password "
    login(credentials: CredentialsInput!): Session!
    " Logout as user, succeessive calls are possible. Autorized: user "
    logout: Session!

    " Create employment offer. Authorized: company "
    createEmploymentOffer(offer: EmploymentOfferInput!): EmploymentOffer!
    " Accept employment offer. Authorized: citizen"
    acceptEmploymentOffer(id: Int!): Employment!
    " Reject employment offer. Authorized: citizen"
    rejectEmploymentOffer(id: Int!, reason: String): EmploymentOffer!
    " Delete rejected employment offer. Authorized: company "
    deleteEmploymentOffer(id: Int!): Void
    " Cancel employment. Authorized: company or citizen "
    cancelEmployment(id: Int!): Void

    " Pay bonus to employees. Authorized: company "
    payBonus(value: Float!, employmentIds: [Int!]!): [SalaryTransaction!]!
    " Create change transaction draft. Authorized: bank "
    changeCurrencies(change: ChangeInput!): ChangeDraft!
    " Pay a change transaction draft. Only bank must specify explicit user. "
    payChangeDraft(id: Int!, credentials: CredentialsInput): ChangeTransaction!
    " Delete a change transaction draft. Authorized: bank "
    deleteChangeDraft(id: Int!): Void
    " Transfer money to another citizen. Authorized: citizen "
    transferMoney(transfer: TransferTransactionInput!): TransferTransaction!
    " Create a purchase draft. Authorized: company "
    sell(purchase: PurchaseInput!): PurchaseDraft!
    " Pay a purchase transaction draft. Only selling company must specify explicit user. "
    payPurchaseDraft(
        id: Int!
        credentials: CredentialsInput
    ): PurchaseTransaction!
    " Delete a purchase draft. Authorized: issuing company"
    deletePurchaseDraft(id: Int!): Void
    " Order products at the warehouse for the next day. Authorized: company "
    warehousePurchase(purchase: WarehousePurchaseInput!): PurchaseTransaction!
    " Charge customs on border crossings. Authorized: border control "
    chargeCustoms(customs: CustomsInput!): CustomsTransaction!

    " Register citizens crossing the border to track compulsory attendance. Authorized: border control "
    registerBorderCrossing(citizenId: ID!): BorderCrossing!
    " Register all citizens leaving the state. Used at the end of the opening ours. Authorized: admin "
    leaveAllCitizens: [Stay!]!

    " Create a new guest account and register him entering. Authorized: border control, admin "
    createGuest(guest: GuestUserInput!): GuestUser!
    " Register a guest leaving. Authorized: border control, admin "
    leaveGuest(id: ID!): GuestUser!

    " Add product to company's inventory. Authorized: company "
    addProduct(product: ProductInput!): Product!
    " Edit product of company's inventory. Authorized: owning company "
    editProduct(id: ID!, product: ProductInput!): Product!
    " Remove product from company's inventory. Authorized: owning company "
    removeProduct(id: ID!): Void

    " Create a vote. Authorized: political admin "
    createVote(vote: VoteInput!): Vote!
    " Delete a vote. Authorized: political admin "
    deleteVote(id: ID!): Void
    " Cast your vote. Authorized: citizen "
    castVote(id: ID!, votingPaper: [Float!]!): Vote!

    " Register a new empty unblocked card. Authorized: admin "
    registerCard(id: ID!): Card!
    " Assign a user to a card. Authorized: border control, admin "
    assignCard(id: ID!, user: UserSignatureInput!): Card!
    " Unassign a user from a card. The card becomes empty egain. Authorized: border control, admin "
    unassignCard(id: ID!): Card!
    " Block card preventing its further use. Authorized: admin "
    blockCard(id: ID!): Card!
    " Unblock card reenabling it use. Authorized: admin "
    unblockCard(id: ID!): Card!

    " Backup the database. Usually not needed because of automatic backups. Authorized: admin "
    backupDatabase: Void
    " Execute sql query. Backups the database before. Requires config `database.allowRawSql`. Authorized: admin "
    execDatabase(sql: String!): JSON!
    " Reload the server configuration. Backups the database before. Authorized: admin "
    reloadConfig: Void
    " Reset the password of an citizen or company. Authorized: admin "
    resetPassword(user: UserSignatureInput!, password: String!): User!
}

" Subscriptions "
type Subscription {
    addedBook(author: String): Book!
}
