diff --git a/node_modules/@graphql-tools/utils/typings/executor.d.cts b/node_modules/@graphql-tools/utils/typings/executor.d.cts
index 23e7e4e..b9ca0cc 100644
--- a/node_modules/@graphql-tools/utils/typings/executor.d.cts
+++ b/node_modules/@graphql-tools/utils/typings/executor.d.cts
@@ -1,6 +1,6 @@
 import { ExecutionRequest, ExecutionResult } from './Interfaces.cjs';
 export type MaybePromise<T> = PromiseLike<T> | T;
 export type MaybeAsyncIterable<T> = AsyncIterable<T> | T;
-export type AsyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => Promise<MaybeAsyncIterable<ExecutionResult<TReturn>>>;
-export type SyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => ExecutionResult<TReturn>;
-export type Executor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => MaybePromise<MaybeAsyncIterable<ExecutionResult<TReturn>>>;
+export type AsyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>, TAdditionalResult = Record<never, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => Promise<MaybeAsyncIterable<ExecutionResult<TReturn>> & TAdditionalResult>;
+export type SyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>, TAdditionalResult = Record<never, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => ExecutionResult<TReturn> & TAdditionalResult;
+export type Executor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>, TAdditionalResult = Record<never, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => MaybePromise<MaybeAsyncIterable<ExecutionResult<TReturn>> & TAdditionalResult>;
diff --git a/node_modules/@graphql-tools/utils/typings/executor.d.ts b/node_modules/@graphql-tools/utils/typings/executor.d.ts
index b8fd07c..26e0b32 100644
--- a/node_modules/@graphql-tools/utils/typings/executor.d.ts
+++ b/node_modules/@graphql-tools/utils/typings/executor.d.ts
@@ -1,6 +1,6 @@
 import { ExecutionRequest, ExecutionResult } from './Interfaces.js';
 export type MaybePromise<T> = PromiseLike<T> | T;
 export type MaybeAsyncIterable<T> = AsyncIterable<T> | T;
-export type AsyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => Promise<MaybeAsyncIterable<ExecutionResult<TReturn>>>;
-export type SyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => ExecutionResult<TReturn>;
-export type Executor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => MaybePromise<MaybeAsyncIterable<ExecutionResult<TReturn>>>;
+export type AsyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>, TAdditionalResult = Record<never, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => Promise<MaybeAsyncIterable<ExecutionResult<TReturn>> & TAdditionalResult>;
+export type SyncExecutor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>, TAdditionalResult = Record<never, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => ExecutionResult<TReturn> & TAdditionalResult;
+export type Executor<TBaseContext = Record<string, any>, TBaseExtensions = Record<string, any>, TAdditionalResult = Record<never, any>> = <TReturn = any, TArgs extends Record<string, any> = Record<string, any>, TContext extends TBaseContext = TBaseContext, TRoot = any, TExtensions extends TBaseExtensions = TBaseExtensions>(request: ExecutionRequest<TArgs, TContext, TRoot, TExtensions, TReturn>) => MaybePromise<MaybeAsyncIterable<ExecutionResult<TReturn>> & TAdditionalResult>;
